import { Logger } from "@infini-soft/logger/lib/types/logger"

/**
 * Copyright Â© All rights reserved 2022
 * Infinisoft Inc.
 * www.infini-soft.com
 * 
 * OpenAPI 3.0.1 schema generator
 * 
 */
type GenerateSchemaProps = {
    resourceName: string
    logger: Logger
}
export const generateSchema = ({ resourceName, logger }: GenerateSchemaProps) => {
    const { info } = logger
    info({ message: `Generator OpenAPI 3.0.1 template schema` })

    return template(resourceName)
}

const template = (resourceName: string) => ({
    "openapi": "3.0.1",
    "info": {
      "title": "Template Rest API",
      "version": "v1.0.0",
      "description": "Infinicloud CLI autogenerated schemas"
    },
    "servers": [
      {
        "url": "https://5uv18kaqpi.execute-api.us-east-1.amazonaws.com/{basePath}",
        "variables": {
          "basePath": {
            "default": "mart"
          }
        }
      },
      {
        "url": "https://6100bc10bca46600171cf987.mockapi.io/"
      }
    ],
    "security": [
      {
        "Cognito": ["aws.cognito.signin.user.admin"]
      }
    ],
    "paths": {
      [`/api/${resourceName}/category`]: {
        "get": {
          "description": "List category. Ex: [Parent, Child, Lawyer]",
          "operationId": "category",
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              }
            },
            "401": {
              "description": "Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      [`/api/${resourceName}`]: {
        "post": {
          "description": "Create a person",
          "operationId": "create",
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              }
            },
            "401": {
              "description": "Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "get": {
          "description": "List person",
          "operationId": "list",
          "parameters": [
            {
              "name": "current",
              "in": "query",
              "description": "Current page",
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "pageSize",
              "in": "query",
              "description": "Items per page",
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "keyword",
              "in": "query",
              "description": "Items per page",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/List"
                  }
                }
              }
            },
            "401": {
              "description": "Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      },
      [`/api/${resourceName}/{PK}||{SK}`]: {
        "get": {
          "description": "Read one person",
          "operationId": "read",
          "parameters": [
            {
              "name": "PK",
              "required": true,
              "in": "path",
              "description": "Partition key",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "SK",
              "required": true,
              "in": "path",
              "description": "Sort Key",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            },
            "401": {
              "description": "Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        },
        "put": {
          "description": "Update a person",
          "operationId": "update",
          "parameters": [
            {
              "name": "PK",
              "required": true,
              "in": "path",
              "description": "Partition key",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "SK",
              "required": true,
              "in": "path",
              "description": "Sort Key",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Response"
                  }
                }
              }
            },
            "401": {
              "description": "Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "Response": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean"
            },
            "data": {
              "type": "object"
            }
          }
        },
        "PageParams": {
          "type": "object",
          "properties": {
            "current": {
              "type": "number"
            },
            "pageSize": {
              "type": "number"
            },
            "keyword": {
              "type": "string"
            }
          }
        },
        "Item": {
          "allOf": [
            {
              "type": "object",
              "properties": {
                "PK": {
                  "type": "string",
                  "description": "Partition Key. Ex: TENANT1334243, TENANT42543"
                },
                "SK": {
                  "type": "string",
                  "description": "Sort Key - Ex: PERSON12121, CASE542124"
                },
                "GSIPK": {
                  "type": "string",
                  "description": "Global Secondary Index - Ex: PARENT, CASE, DOCUMENT"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "Item is enabled or disabled"
                },
                "USERID": {
                  "type": "string",
                  "description": "Item creator userid"
                },
                "NAME": {
                  "type": "string",
                  "description": "Item creator name"
                },
                "EMAIL": {
                  "type": "string",
                  "description": "Item creator email"
                },
                "PICTURE": {
                  "type": "string",
                  "description": "Item creator picture url"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Creation date in ISO 8601 format"
                },
                "updatedAt": {
                  "type": "string",
                  "description": "Lasy updated date in ISO 8601 format"
                }
              },
              "required": ["PK", "SK", "GSIPK"]
            },
            {
              "$ref": "#/components/schemas/Person"
            }
          ]
        },
        "Person": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "address": {
              "type": "string"
            },
            "birthdate": {
              "type": "string"
            },
            "telephones": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "List": {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Item"
              }
            },
            "total": {
              "type": "integer",
              "description": "Item count",
              "format": "int32"
            },
            "success": {
              "type": "boolean"
            }
          }
        },
        "ErrorResponse": {
          "required": ["errorCode"],
          "type": "object",
          "properties": {
            "errorCode": {
              "type": "string",
              "description": "Error code"
            },
            "errorMessage": {
              "type": "string",
              "description": "Error message"
            },
            "success": {
              "type": "boolean",
              "description": "Request success or not"
            }
          }
        }
      }
    },
    "x-amazon-apigateway-request-validators": {
      "Validate query string parameters and headers": {
        "validateRequestParameters": true,
        "validateRequestBody": false
      }
    }
  }
  )